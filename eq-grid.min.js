export function initEqGrid(gridColWidth=100,gridGap=16,units="px",maxColspan=6,maxColCollapse=6){if(ResizeObserver&&"customElements"in window){if(!customElements.get("eq-grid")){class EqGrid extends HTMLElement{constructor(){super();const gridStyles=document.getElementById("eq-grid-styles");if(!gridStyles){var style=document.createElement("style");style.type="text/css";style.id="eq-grid-styles";style.innerHTML=generateCss(gridColWidth,gridGap,units,maxColspan,maxColCollapse);document.getElementsByTagName("head")[0].appendChild(style)}}getPixels(value){let test=document.createElement("div");Object.assign(test.style,{position:"absolute",width:value});this.appendChild(test);let pixels=test.offsetWidth;this.removeChild(test);return pixels}toggleClasses(watched,value,contentRect){const query=contentRect.width<=this.getPixels(value+units);watched.target.classList.toggle(`max-width-${value}`,query);watched.target.classList.toggle(`min-width-${value}`,!query)}observe(){this.ro=new ResizeObserver(entries=>{const watched=entries[0];const contentRect=watched.contentRect;for(let i=2;i<=7;i++){this.toggleClasses(watched,i*gridColWidth,contentRect)}});this.ro.observe(this)}connectedCallback(){this.observe()}}customElements.define("eq-grid",EqGrid)}}};function generateCss(gridColWidth,gridGap,units,maxColspan,maxColCollapse){let css=`\n    eq-grid {\n      display: grid;\n    }\n    \n    .eq-grid-dense {\n      grid-auto-flow: dense;\n    }\n    \n    eq-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(${gridColWidth}${units}, 1fr));\n      word-break: break-word;\n      margin: -${gridGap/2}${units}; \n    }\n    \n    eq-grid > * {\n      padding: ${gridGap/2}${units};\n    }\n  \n    eq-grid > eq-grid {\n      padding: ${gridGap/2}${units}  0;\n      margin: -${gridGap/2}${units}  0;\n    }\n  \n    eq-grid .eq-row-2 {\n      grid-row: span 2;\n    }\n  \n    eq-grid .eq-row-3 {\n      grid-row: span 3;\n    }\n  \n    eq-grid .eq-col-max {\n      grid-column-start: 1;\n      grid-column-end: -1;\n    }`;for(var i=2;i<=maxColspan;i++){for(var j=i;j<=maxColspan;j++){css+=`\n        eq-grid.min-width-${i*gridColWidth} > [class*='eq-col-${j}'] {\n          grid-column: span ${i};\n        }`}for(var k=1;k<=i;k++){if(k!==i){css+=`\n          eq-grid.min-width-${i*gridColWidth}.max-width-${(i+1)*gridColWidth} .eq-col-${k}-${i} {\n              grid-column: span ${k};        \n            }`}}}const collapseGridColumns=`\n      grid-column-start: 1;\n      grid-column-end: -1;`;for(var i=2;i<=maxColCollapse;i++){for(var j=1;j<=i;j++){if(j>1){css+=`\n            .eq-grid-${i}-collapse.max-width-${(i+1)*gridColWidth} > [class*='eq-col-${j}'] {\n              ${collapseGridColumns}\n            }`}else{css+=`\n          .eq-grid-${i}-collapse.max-width-${(i+1)*gridColWidth} > .eq-col {\n            ${collapseGridColumns}\n          }`}}for(var j=1;j<=i;j++){if(j>1){css+=`\n          eq-grid.max-width-${(i+1)*gridColWidth} > .eq-col-${j}.eq-col-${i}-collapse {\n              ${collapseGridColumns}\n            }`}else{css+=`\n          eq-grid.max-width-${(i+1)*gridColWidth} > .eq-col.eq-col-${i}-collapse {\n            ${collapseGridColumns}\n          }`}}}css+=`\n    .eq-grid-gap-0 {\n      margin: 0;\n    }\n  \n    .eq-grid-gap-0 [class*='eq-col'] {\n      padding: 0;\n    }\n  \n    .eq-grid-gap-0 eq-grid {\n      padding: 0 !important;\n      margin: 0 !important;\n    }\n    \n    .eq-grid-gap-1 {\n      margin: -${gridGap/4}${units};\n    }\n    .eq-grid-gap-1 [class*='eq-col'] {\n      padding: ${gridGap/4}${units};\n    }\n    \n    .eq-grid-gap-1 eq-grid {\n      padding: ${gridGap/4}${units} 0 !important;\n      margin: -${gridGap/4}${units} 0 !important;    \n    }\n      \n    .eq-grid-gap-3 {\n      margin: -${gridGap}${units};\n    }\n  \n    .eq-grid-gap-3 [class*='eq-col'] {\n      padding: ${gridGap}${units};\n    }\n    \n    .eq-grid-gap-3 eq-grid {\n      padding: ${gridGap}${units} 0 !important;\n      margin: -${gridGap}${units} 0 !important;\n    }`;return css}